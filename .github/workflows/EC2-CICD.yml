# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  DOTNET_VERSION: '6.x'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'soccer/MatchResultDb/**'
      - '.github/workflows/RDS_Publish.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-deploy:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release .\soccer\Soccer.Web

      - name: dotnet publish
        run: dotnet publish -c Release -o publish .\soccer\Soccer.Web
        
      - name: IIS stop
        uses: im-open/iis-service-action@v1.0.7
        with:
          action: 'stop'
          server: ${{ secrets.EC2_HOST }}
          service-account-id: ${{ secrets.EC2_USER }}
          service-account-password: ${{ secrets.EC2_SSH_KEY }}
        
      - name: Copy to EC2
        env:
          REMOTE_IP: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USER }}
          PASSWORD: ${{ secrets.EC2_SSH_KEY }}
        run: |
          $remoteIP = $env:REMOTE_IP
          $username = $env:USERNAME
          $password = ConvertTo-SecureString $env:PASSWORD -AsPlainText -Force
          $credentials = New-Object System.Management.Automation.PSCredential ($username, $password)
  
          $sourceFilePath = ".\publish"
          $destinationPath = "\\$remoteIP\C$\inetpub\wwwroot"
          
          New-PSDrive -Name RemoteDrive -PSProvider FileSystem -Root $destinationPath -Credential $credentials 
          Copy-Item -Path $sourceFilePath -Destination "RemoteDrive:" -Recurse -Force            
          Remove-PSDrive -Name RemoteDrive
          
      - name: IIS start
        uses: im-open/iis-service-action@v1.0.7
        with:
          action: 'start'
          server: ${{ secrets.EC2_HOST }}
          service-account-id: ${{ secrets.EC2_USER }}
          service-account-password: ${{ secrets.EC2_SSH_KEY }}
    
