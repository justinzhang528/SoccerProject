# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Publish DB to AWS RDS
env:
  DOTNET_VERSION: '6.x'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "main" ]
    paths:
      - 'soccer/MatchResultDb/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  publish-db:
    runs-on: windows-latest

    steps:        
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build SQL Server Database Project
        run: dotnet publish ./soccer/MatchResultDb/MatchResultDb.sqlproj -o $(Build.ArtifactStagingDirectory)
        
      - name: Publish Database to RDS
        run: |
          export RDS_SERVER = ${{ secrets.RDS_SERVER }}
          export RDS_USERNAME = ${{ secrets.RDS_USERNAME }}
          export RDS_PASSWORD = ${{ secrets.RDS_PASSWORD }}
          export RDS_PORT = 1433
          export DATABASE_NAME = ${{ secrets.DATABASE_NAME }}

          sqlpackage /a:Publish /tsn:$RDS_SERVER /tdn:$DATABASE_NAME /tu:$RDS_USERNAME /tp:$RDS_PASSWORD /tcp:$RDS_PORT /sf:$(Build.ArtifactStagingDirectory)/MatchResultDb.dacpac
